# Dedikeret container til model monitoring
FROM python:3.10-slim

# Sæt miljøvariabler
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV ENVIRONMENT=production

# Installér system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    gcc \
    cron \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Sæt arbejdsmappen i containeren
WORKDIR /app

# Installér Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir apscheduler matplotlib seaborn scikit-learn

# Opret nødvendige mapper
RUN mkdir -p /app/data/predictions /app/models/figures

# Kopier kun nødvendige filer
COPY src/ src/
COPY models/ models/
COPY data/ data/
COPY .env .env

# Opret cron job-script til drift detection
RUN echo '#!/bin/bash\n\
python -c "from src.monitoring.scheduler import ModelUpdateScheduler; scheduler = ModelUpdateScheduler(); scheduler.check_and_update_model()"\n\
' > /app/run_monitoring.sh

# Gør script eksekverbart
RUN chmod +x /app/run_monitoring.sh

# Konfigurer cron-job til at køre hver dag kl. 01:00
RUN echo "0 1 * * * root /app/run_monitoring.sh >> /var/log/cron.log 2>&1" > /etc/cron.d/monitoring_cron
RUN chmod 0644 /etc/cron.d/monitoring_cron

# Opret log-fil
RUN touch /var/log/cron.log

# Sørg for at mapperne har korrekte tilladelser
RUN chmod -R 755 /app/data
RUN chmod -R 755 /app/models

# Health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=5s --retries=3 \
    CMD ps aux | grep "[p]ython" || exit 1

# Start cron-service og hold containeren kørende
CMD cron && tail -f /var/log/cron.log 